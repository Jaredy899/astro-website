---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { ClientRouter } from 'astro:transitions';
import Sidebar from '../components/Sidebar.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import CopyButtonScript from '../components/CopyButtonScript.astro';
import Analytics from '@vercel/analytics/astro';
import SpeedInsights  from "@vercel/speed-insights/astro";

interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
const allPosts = await getCollection('blog');
const posts = allPosts.filter(post => !post.data.draft);

// Group posts by year and month
const postsByYear = posts.reduce((acc, post) => {
	const year = post.data.pubDate.getFullYear();
	const month = post.data.pubDate.getMonth();
	
	if (!acc[year]) {
		acc[year] = {};
	}
	if (!acc[year][month]) {
		acc[year][month] = [];
	}
	acc[year][month].push(post);
	return acc;
}, {} as Record<number, Record<number, CollectionEntry<'blog'>[]>>);

// Sort years and months in descending order
const sortedYears = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Jared Cervantes - Personal Website" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<ClientRouter />
	</head>
	<body>
		<button id="sidebar-toggle" aria-label="Toggle sidebar">
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
				<line x1="8" y1="6" x2="8" y2="18"></line>
			</svg>
		</button>
		<Sidebar posts={posts} />
		<ThemeToggle />
		<main id="main-content">
			<slot />
		</main>
		<CopyButtonScript />
		<Analytics />
		<SpeedInsights />
	</body>
</html>

<script>
	// --------- SIDEBAR TOGGLE ---------
	const handleSidebarToggleClick = () => {
		const sidebar = document.getElementById("sidebar");
		const overlay = document.getElementById("sidebar-overlay");
		
		if (sidebar && overlay) {
			const isOpen = sidebar.classList.contains('open');
			
			if (isOpen) {
				sidebar.classList.remove('open');
				overlay.classList.remove('active');
			} else {
				sidebar.classList.add('open');
				overlay.classList.add('active');
			}
		}
	};

	const handleOverlayClick = () => {
		const sidebar = document.getElementById("sidebar");
		const overlay = document.getElementById("sidebar-overlay");
		
		if (sidebar && overlay) {
			sidebar.classList.remove('open');
			overlay.classList.remove('active');
		}
	};

	const setupSidebar = () => {
		const sidebarToggleButton = document.getElementById("sidebar-toggle");
		const overlay = document.getElementById("sidebar-overlay");

		if (sidebarToggleButton) {
			sidebarToggleButton.removeEventListener("click", handleSidebarToggleClick);
			sidebarToggleButton.addEventListener("click", handleSidebarToggleClick);
		}
		if (overlay) {
			overlay.removeEventListener("click", handleOverlayClick);
			overlay.addEventListener("click", handleOverlayClick);
		}
	};

	// Run on initial load and after view transitions
	if (typeof document !== 'undefined') {
		setupSidebar();
		document.addEventListener('astro:page-load', setupSidebar);
	}
</script>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 255, 230, 255;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
		--background: #ffffff;
		--text: #333333;
		--link-color: rgb(var(--accent));
		--sidebar-width: 300px;
		--content-max-width: 1000px;
	}

	:root.dark {
		--background: #000000;
		--text: #ffffff;
		--link-color: #b794f4;
	}

	html {
		font-family: 'Inter', system-ui, -apple-system, sans-serif;
		background: var(--background);
		background-size: 224px;
		color: var(--text);
		transition: background-color 0.3s ease, color 0.3s ease;
	}

	body {
		margin: 0;
		padding: 0;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		position: relative;
		transition: padding-left 0.3s ease;
	}

	body.sidebar-open {
		padding-left: var(--sidebar-width);
		overflow: hidden;
	}

	#main-content {
		max-width: var(--content-max-width);
		padding: 1rem;
		box-sizing: border-box;
		overflow-x: hidden;
	}

	#sidebar-toggle {
		position: fixed;
		top: 1rem;
		left: 1rem;
		padding: 0.25rem;
		border-radius: 50%;
		border: none;
		background: transparent;
		color: var(--text);
		cursor: pointer;
		transition: transform 0.3s ease;
		z-index: 1002;
	}

	#sidebar-toggle:hover {
		transform: scale(1.1);
	}

	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

	/* Tablet and Mobile Overrides */
	@media (max-width: 768px) {
		body {
			align-items: stretch;
			justify-content: flex-start;
			padding-left: 0 !important;
		}

		body.sidebar-open {
			padding-left: 0 !important;
			overflow: hidden;
		}

		#main-content {
			max-width: none;
			padding: 3rem 1rem 1rem 1rem;
		}
	}

	/* Small Mobile Overrides */
	@media (max-width: 480px) {
		#sidebar-toggle {
			top: 0.5rem;
			left: 0.5rem;
		}

		#main-content {
			padding: 3rem 0.5rem 0.5rem 0.5rem;
		}
	}
</style>
