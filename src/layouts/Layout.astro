---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { ClientRouter } from 'astro:transitions';

interface Props {
	title: string;
	showSidebar?: boolean;
}

const { title, showSidebar = false } = Astro.props;
const posts = await getCollection('blog');

// Group posts by year and month
const postsByYear = posts.reduce((acc, post) => {
	const year = post.data.pubDate.getFullYear();
	const month = post.data.pubDate.getMonth();
	
	if (!acc[year]) {
		acc[year] = {};
	}
	if (!acc[year][month]) {
		acc[year][month] = [];
	}
	acc[year][month].push(post);
	return acc;
}, {} as Record<number, Record<number, CollectionEntry<'blog'>[]>>);

// Sort years and months in descending order
const sortedYears = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Jared Cervantes - Personal Website" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">
		<title>{title}</title>
		<ClientRouter />
	</head>
	<body>
		<button id="sidebar-toggle" aria-label="Toggle sidebar">
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
				<line x1="8" y1="6" x2="8" y2="18"></line>
			</svg>
		</button>
		<aside id="sidebar" class="sidebar">
			<nav>
				<h2>Blog Posts</h2>
				<div class="blog-archive">
					{sortedYears.map((year) => (
						<div class="year-section">
							<h3 class="year">{year}</h3>
							{Object.keys(postsByYear[Number(year)])
								.sort((a, b) => Number(b) - Number(a))
								.map((month) => (
									<div class="month-section">
										<h4 class="month">
											{new Date(0, Number(month)).toLocaleString('default', { month: 'long' })}
										</h4>
										<ul>
											{postsByYear[Number(year)][Number(month)].map((post: CollectionEntry<'blog'>) => (
												<li>
													<a href={`/blog/${post.slug}`}>{post.data.title}</a>
												</li>
											))}
										</ul>
									</div>
								))}
						</div>
					))}
				</div>
			</nav>
		</aside>
		<div id="sidebar-overlay" class="sidebar-overlay"></div>
		<button id="theme-toggle" aria-label="Toggle theme">
			<svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<circle cx="12" cy="12" r="5"/>
				<line x1="12" y1="1" x2="12" y2="3"/>
				<line x1="12" y1="21" x2="12" y2="23"/>
				<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
				<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
				<line x1="1" y1="12" x2="3" y2="12"/>
				<line x1="21" y1="12" x2="23" y2="12"/>
				<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
				<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
			</svg>
			<svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
			</svg>
		</button>
		<slot />
	</body>
</html>

<script>
	// --------- THEME TOGGLE ---------
	// Stable function for theme toggle click
	const handleThemeToggleClick = () => {
		const element = document.documentElement;
		element.classList.toggle("dark");
		const isDark = element.classList.contains("dark");
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem("theme", isDark ? "dark" : "light");
		}
		document.getElementById('sun-icon')?.classList.toggle('hidden');
		document.getElementById('moon-icon')?.classList.toggle('hidden');
	};

	const setupTheme = () => {
		const currentTheme = (() => {
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme') || 'dark';
			}
			if (typeof window !== 'undefined' && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
				return 'dark';
			}
			return 'dark'; // Default to 'dark'
		})();

		const sunIcon = document.getElementById('sun-icon');
		const moonIcon = document.getElementById('moon-icon');

		if (currentTheme === 'light') {
			document.documentElement.classList.remove('dark');
			sunIcon?.classList.add('hidden');
			moonIcon?.classList.remove('hidden');
		} else {
			document.documentElement.classList.add('dark');
			sunIcon?.classList.remove('hidden');
			moonIcon?.classList.add('hidden');
		}

		if (typeof localStorage !== 'undefined') {
			localStorage.setItem('theme', currentTheme);
		}

		const themeToggleButton = document.getElementById("theme-toggle");
		if (themeToggleButton) {
			themeToggleButton.removeEventListener("click", handleThemeToggleClick);
			themeToggleButton.addEventListener("click", handleThemeToggleClick);
		}
	};

	// --------- SIDEBAR TOGGLE ---------
	// Stable function for sidebar toggle click
	const handleSidebarToggleClick = () => {
		const sidebar = document.getElementById("sidebar");
		const overlay = document.getElementById("sidebar-overlay");
		if (sidebar && overlay) {
			sidebar.classList.toggle("active");
			overlay.classList.toggle("active");
			document.body.classList.toggle("sidebar-open");
		}
	};

	const setupSidebar = () => {
		const sidebarToggleButton = document.getElementById("sidebar-toggle");
		const overlay = document.getElementById("sidebar-overlay");

		if (sidebarToggleButton) {
			sidebarToggleButton.removeEventListener("click", handleSidebarToggleClick);
			sidebarToggleButton.addEventListener("click", handleSidebarToggleClick);
		}
		if (overlay) {
			overlay.removeEventListener("click", handleSidebarToggleClick);
			overlay.addEventListener("click", handleSidebarToggleClick);
		}
	};

	// --------- INITIALIZATION ---------
	const initializePageUI = () => {
		setupTheme();
		setupSidebar();
	};

	// Run on initial load and after view transitions
	if (typeof document !== 'undefined') {
		initializePageUI();
		document.addEventListener('astro:page-load', initializePageUI);
	}
</script>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
		--background: #ffffff;
		--text: #333333;
	}

	:root.dark {
		--background: #000000;
		--text: #ffffff;
	}

	html {
		font-family: system-ui, sans-serif;
		background: var(--background);
		background-size: 224px;
		color: var(--text);
		transition: background-color 0.3s ease, color 0.3s ease;
	}

	body {
		margin: 0;
		padding: 0;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		position: relative;
	}

	#theme-toggle {
		position: fixed;
		top: 1rem;
		right: 1rem;
		padding: 0.25rem;
		border-radius: 50%;
		border: none;
		background: transparent;
		color: var(--text);
		cursor: pointer;
		transition: transform 0.3s ease;
	}

	#sidebar-toggle {
		position: fixed;
		top: 1rem;
		left: 1rem;
		padding: 0.25rem;
		border-radius: 50%;
		border: none;
		background: transparent;
		color: var(--text);
		cursor: pointer;
		transition: transform 0.3s ease;
		z-index: 1002;
	}

	#sidebar-toggle:hover {
		transform: scale(1.1);
	}

	#theme-toggle:hover {
		transform: scale(1.1);
	}

	.hidden {
		display: none;
	}

	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

	.sidebar {
		position: fixed;
		top: 0;
		left: -300px;
		width: 300px;
		height: 100vh;
		background: var(--background);
		box-shadow: none;
		transition: left 0.3s ease;
		z-index: 1001;
		padding: 2rem;
		visibility: hidden;
	}

	.sidebar.active {
		left: 0;
		visibility: visible;
		box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
	}

	.sidebar-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.5);
		opacity: 0;
		visibility: hidden;
		transition: opacity 0.3s ease, visibility 0.3s ease;
		z-index: 1000;
	}

	.sidebar-overlay.active {
		opacity: 1;
		visibility: visible;
	}

	.sidebar nav {
		margin-top: 2rem;
	}

	.sidebar h2 {
		margin: 0;
		font-size: 1.5rem;
		color: var(--text);
	}

	.sidebar ul {
		list-style: none;
		padding: 0;
		margin: 1rem 0;
	}

	.sidebar li {
		margin: 0.5rem 0;
	}

	.sidebar a {
		color: var(--text);
		text-decoration: none;
		font-size: 1.1rem;
		transition: color 0.2s ease;
	}

	.sidebar a:hover {
		color: rgb(var(--accent));
	}

	body.sidebar-open {
		overflow: hidden;
	}

	.blog-archive {
		margin-top: 1rem;
	}

	.year-section {
		margin-bottom: 1.5rem;
	}

	.year {
		font-size: 1.2rem;
		font-weight: 600;
		color: var(--text);
		margin-bottom: 0.5rem;
	}

	.month-section {
		margin-left: 1rem;
		margin-bottom: 1rem;
	}

	.month {
		font-size: 1rem;
		font-weight: 500;
		color: var(--text);
		margin-bottom: 0.25rem;
		opacity: 0.8;
	}

	.month-section ul {
		margin-left: 1rem;
	}

	.month-section li {
		margin: 0.25rem 0;
	}

	.month-section a {
		font-size: 0.95rem;
		opacity: 0.9;
	}

	.month-section a:hover {
		opacity: 1;
	}
</style>
